const express = require("express");
const transactionSchemaModel = require("../schema/transactionSchemaCode");
const bookSchemaModel = require("../schema/bookSchemacode");
const userSchemaModel = require("../schema/userSchemaCode");

const transacRouter2 = express.Router();

// API 1.1: List of people who was issued that book in the past
transacRouter2.get('/book/history/:bookName', async (req, res) => {
    const { bookName } = req.params;

    try {
        // Find all transactions where the book has been issued (both returned and currently issued)
        const transactions = await transactionSchemaModel.find({ bookName });

        if (transactions.length === 0) return res.status(404).json({ message: "No transactions found for this book" });

        // Filter all transactions with users who issued the book in the past
        const pastIssued = transactions.filter(transaction => transaction.status === "returned" || transaction.status === "issued");

        const users = pastIssued.map(transaction => ({
            userName: transaction.userName,
            email: transaction.email,
            issueDate: transaction.issueDate,
            returnDate: transaction.returnDate,
            status: transaction.status
        }));

        const totalIssuedCount = users.length;

        res.status(200).json({ totalIssuedCount, users });
    } catch (error) {
        res.status(500).json({ error: "An error occurred while fetching the book's issue history" });
    }
});

//API 1.2: Check if the book is currently issued or not and to whom
transacRouter2.get('/book/current/:bookName', async (req, res) => {
    const { bookName } = req.params;

    try {
        // Find the transaction where the book is currently issued
        const currentTransaction = await transactionSchemaModel.findOne({ bookName, status: "issued" });

        if (!currentTransaction) {
            return res.status(200).json({ message: "The book is not issued at the moment" });
        }

        res.status(200).json({
            message: "The book is currently issued",
            userName: currentTransaction.userName,
            email: currentTransaction.email,
            issueDate: currentTransaction.issueDate
        });
    } catch (error) {
        res.status(500).json({ error: "An error occurred while checking the book's current issue status" });
    }
});

//API 2:  Total rent generated by a book.
transacRouter2.get('/book/rent/:bookName', async (req, res) => {
    const { bookName } = req.params;

    try {
        // Find all transactions where the book has been issued (both returned and currently issued)
        const transactions = await transactionSchemaModel.find({ bookName });

        if (transactions.length === 0) return res.status(404).json({ message: "No transactions found for this book" });

        // Filter all transactions with users who issued the book in the past
        const pastIssued = transactions.filter(transaction => transaction.status === "returned");

        const totalRent = pastIssued.reduce((acc, transaction) => acc + transaction.totalRent, 0);

        res.status(200).json({ totalRent });
    } catch (error) {
        res.status(500).json({ error: "An error occurred while fetching the book's total rent" });
    }
});

//API 3: List of books issued to a user using their user name
transacRouter2.get('/user/history/:userName', async (req, res) => {
    const { userName } = req.params;

    try {
        // Find all transactions where the user was issued a book
        const transactions = await transactionSchemaModel.find({ userName });

        if (transactions.length === 0) return res.status(404).json({ message: "No transactions found for this user" });

        // Filter all transactions with users who was issued a book in the past
        const pastIssued = transactions.filter(transaction => transaction.status === "returned" || transaction.status === "issued");

        const books = pastIssued.map(transaction => ({
            bookName: transaction.bookName,
            issueDate: transaction.issueDate,
            returnDate: transaction.returnDate,
            rentPaid: transaction.totalRent,
            status: transaction.status
        }));

        const totalIssuedCount = books.length;

        res.status(200).json({ totalIssuedCount, books });
    } catch (error) {
        res.status(500).json({ error: "An error occurred while fetching the user's issue history" });
    }
});

// INPUT - Date range
// OUTPUT - list of books issued in that date range and the person they are issued to
transacRouter2.get('/date/history', async (req, res) => {
    const { startDate, endDate } = req.body;

    try {
        // Find all transactions where the book has been issued (both returned and currently issued)
        const transactions = await transactionSchemaModel.find({
            issueDate: {
                $gte: startDate,
                $lte: endDate
            }
        });

        if (transactions.length === 0) return res.status(404).json({ message: "No transactions found for this date range" });

        // Filter all transactions with users who issued the book in the past
        const pastIssued = transactions.filter(transaction => transaction.status === "returned" || transaction.status === "issued");

        const books = pastIssued.map(transaction => ({
            bookName: transaction.bookName,
            userName: transaction.userName,
            issueDate: transaction.issueDate,
            returnDate: transaction.returnDate,
            status: transaction.status
        }));

        const totalIssuedCount = books.length;

        res.status(200).json({ totalIssuedCount, books });
    } catch (error) {
        res.status(500).json({ error: "An error occurred while fetching the book's issue history" });
    }
});

//HELPER APIS: to get LIST OF ALL USERS
transacRouter2.get('/users', async (req, res) => {
    try {
        const users = await userSchemaModel.find();
        res.status(200).json(users);
    } catch (error) {
        res.status(500).json({ error: "An error occurred while fetching the list of users" });
    }
});

//HELPER APIS: to get LIST OF ALL BOOKS
transacRouter2.get('/books', async (req, res) => {
    try {
        const books = await bookSchemaModel.find();
        res.status(200).json(books);
    } catch (error) {
        res.status(500).json({ error: "An error occurred while fetching the list of books" });
    }
});


module.exports = transacRouter2;